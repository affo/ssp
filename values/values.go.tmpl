package values

import (
	"fmt"
)

type Type int

const (
  _ Type = iota
  Object
	{{range . -}}
    {{- title .}}
  {{end}}
)

func (t Type) String() string {
	switch t {
	{{- range . -}}
	case {{title .}}:
		return "{{.}}"
	{{end -}}
	default:
		panic(fmt.Errorf("unknown type %d", t))
	}
}

type Value interface {
	Type() Type
	Get() interface{}
	IsNull() bool
	{{range . -}}
    {{title .}}() {{.}}
  {{end}}
}

{{range $t := . -}}
type {{$t}}Value struct {
  v {{$t}}
}

func (v {{$t}}Value) Type() Type {
  return {{title $t}}
}

func (v {{$t}}Value) Get() interface{} {
  return v.v
}

func (v {{$t}}Value) IsNull() bool {
  return false
}

{{range $tt := $}}
{{if ne $tt "string"}}
func (v {{$t}}Value) {{title $tt}}() {{$tt}} {
  {{if eq $t $tt -}}
  return v.v
  {{- else -}}
  panic("cannot get {{$tt}} out of {{$t}}")
  {{- end}}
}
{{end}}
{{end}}

func (v {{$t}}Value) String() string {
  return fmt.Sprintf("%v", v.Get())
}
{{end}}

func New(v interface{}) Value {
	if v == nil {
		panic("cannot create value from nil")
	}
	switch v := v.(type) {
	{{- range . -}}
	case {{.}}:
		return {{.}}Value{v: v}
	{{end -}}
  default:
    return goObjectValue{v: v}
	}
}

type nullValue struct {
	t Type
}

func NewNull(t Type) Value {
	return nullValue{t: t}
}

func (v nullValue) Type() Type {
	return v.t
}

func (v nullValue) Get() interface{} {
	return nil
}

func (v nullValue) IsNull() bool {
	return true
}

func (v nullValue) SizeBytes() int {
  return 0
}

{{range .}}
{{if ne . "string"}}
func (v nullValue) {{title .}}() {{.}} {
  panic("cannot get {{.}} out of null value")
}
{{end}}
{{end}}

func (v nullValue) String() string {
	return fmt.Sprintf("nil(%v)", v.t)
}

type goObjectValue struct {
  v interface{}
}

func (v goObjectValue) Type() Type {
	return Object
}

func (v goObjectValue) Get() interface{} {
	return v.v
}

func (v goObjectValue) IsNull() bool {
	return true
}

{{range .}}
{{if ne . "string"}}
func (v goObjectValue) {{title .}}() {{.}} {
  panic("cannot get {{.}} out of generic Go object value")
}
{{end}}
{{end}}

func (v goObjectValue) String() string {
	return fmt.Sprintf("%v", v.v)
}
