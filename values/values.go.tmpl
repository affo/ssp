package values

import (
	"fmt"
)

type Type int

const (
  _ Type = iota
	{{range $t, $s := . -}}
    {{- title $t}}
  {{end}}
)

func (t Type) String() string {
	switch t {
	{{- range $t, $s := . -}}
	case {{title $t}}:
		return "{{$t}}"
	{{end -}}
	default:
		panic(fmt.Errorf("unknown type %d", t))
	}
}

type Value interface {
	Type() Type
	Get() interface{}
	IsNull() bool
	SizeBytes() int
	{{range $t, $s := . -}}
    {{title $t}}() {{$t}}
  {{end}}
}

{{range $t, $s := . -}}
type {{$t}}Value struct {
  v {{$t}}
}

func (v {{$t}}Value) Type() Type {
  return {{title $t}}
}

func (v {{$t}}Value) Get() interface{} {
  return v.v
}

func (v {{$t}}Value) IsNull() bool {
  return false
}

func (v {{$t}}Value) SizeBytes() int {
  return {{$s}}
}

{{range $tt, $s := $}}
{{if ne $tt "string"}}
func (v {{$t}}Value) {{title $tt}}() {{$tt}} {
  {{if eq $t $tt -}}
  return v.v
  {{- else -}}
  panic("cannot get {{$tt}} out of {{$t}}")
  {{- end}}
}
{{end}}
{{end}}

func (v {{$t}}Value) String() string {
  return fmt.Sprintf("%v", v.Get())
}
{{end}}

func New(v interface{}) Value {
	if v == nil {
		panic("cannot create value from nil")
	}
	switch v := v.(type) {
	{{- range $t, $s := . -}}
	case {{$t}}:
		return {{$t}}Value{v: v}
	{{end -}}
	default:
		panic(fmt.Errorf("cannot create value from type %T", v))
	}
}

type nullValue struct {
	t Type
}

func NewNull(t Type) Value {
	return nullValue{t: t}
}

func (v nullValue) Type() Type {
	return v.t
}

func (v nullValue) Get() interface{} {
	return nil
}

func (v nullValue) IsNull() bool {
	return true
}

func (v nullValue) SizeBytes() int {
  return 0
}

{{range $t, $s := .}}
{{if ne $t "string"}}
func (v nullValue) {{title $t}}() {{$t}} {
  panic("cannot get {{$t}} out of null value")
}
{{end}}
{{end}}

func (v nullValue) String() string {
	return "nil"
}
