package {{.Package}}

import (
	"context"
	"fmt"
	"sort"
	"strings"
)

type graphContextKey int

const key graphContextKey = iota

type Graph struct {
	adjacency map[{{.NodeClass}}][]*Arch
	roots     map[{{.NodeClass}}]bool
}

func (g *Graph) add(a *Arch) {
	g.adjacency[a.From()] = append(g.adjacency[a.From()], a)
	if _, ok := g.roots[a.From()]; !ok {
		g.roots[a.From()] = true
	}
	g.roots[a.To()] = false
}

func (g Graph) Roots() (roots []{{.NodeClass}}) {
	for n, root := range g.roots {
		if root {
			roots = append(roots, n)
		}
	}
	sort.Sort(nodesByRepr(roots))
	return roots
}

func (g Graph) Adjacents(n {{.NodeClass}}) []*Arch {
	return g.adjacency[n]
}

type Visitor func(a *Arch)

type nodesByRepr []{{.NodeClass}}

func nodeToString(n {{.NodeClass}}) string {
	return fmt.Sprintf("%v", n)
}

func (n nodesByRepr) Len() int {
	return len(n)
}

func (n nodesByRepr) Less(i, j int) bool {
	return strings.Compare(nodeToString(n[i]), nodeToString(n[j])) < 0
}

func (n nodesByRepr) Swap(i, j int) {
	n[i], n[j] = n[j], n[i]
}

func (g Graph) Walk(v Visitor) {
	// Walk in predictable order.
	keys := make(nodesByRepr, 0, len(g.adjacency))
	for n := range g.adjacency {
		keys = append(keys, n)
	}
	sort.Sort(keys)
	for _, from := range keys {
		adj := g.adjacency[from]
		for _, a := range adj {
			v(a)
		}
	}
}

func (g Graph) String() string {
	sb := strings.Builder{}
	g.Walk(func(a *Arch) {
		sb.WriteString(fmt.Sprintf("%v", a))
		sb.WriteRune('\n')
	})
	return sb.String()
}

func getGraph(ctx context.Context) *Graph {
	return ctx.Value(key).(*Graph)
}

func GetGraph(ctx context.Context) Graph {
	return *ctx.Value(key).(*Graph)
}

func setGraph(ctx context.Context, g Graph) context.Context {
	return context.WithValue(ctx, key, &g)
}

func Context() context.Context {
	ctx := context.Background()
	ctx = setGraph(ctx, Graph{
		adjacency: make(map[{{.NodeClass}}][]*Arch),
		roots:     make(map[{{.NodeClass}}]bool),
	})
	return ctx
}

type Link interface {
	Connect(ctx context.Context, node {{.NodeClass}}) {{.NodeClass}}
}

var _ Link = (*Arch)(nil)

type Arch struct {
	from Node
	to   Node

	// Fields added by the user.
	{{range .ArchFields -}}
    {{.Name}} {{.Type}}
  {{- end}}
}

func NewLink(from Node) *Arch {
	return &Arch{
	  from: from,
	}
}

func (a *Arch) From() Node {
	return a.from
}

func (a *Arch) To() Node {
	return a.to
}

func (a *Arch) Connect(ctx context.Context, node Node) Node {
	g := getGraph(ctx)
	clone := &Arch{
	  from: a.from,
	  to: node,
	}
	g.add(clone)
	return node
}

func (a *Arch) String() string {
  return fmt.Sprintf("%v -> %v", a.from, a.to)
}
